#include <iostream>
#include <queue>


class Graph {
    int V; 
    int **adj; 

public:
    Graph(int V) : V(V) {
     
        adj = new int*[V];
        for (int i = 0; i < V; ++i) {
            adj[i] = new int[V];
            for (int j = 0; j < V; ++j)
                adj[i][j] = 0;
        }
    }

   
    void addEdge(int v, int w) {
        adj[v][w] = 1;
    }


    void BFS(int startVertex) {
       
        bool *visited = new bool[V];
        for (int i = 0; i < V; ++i)
            visited[i] = false;

        std::queue<int> q;

       
        visited[startVertex] = true;
        q.push(startVertex);

        while (!q.empty()) {
           
            int currentVertex = q.front();
            std::cout << currentVertex << " ";
            q.pop();

            for (int i = 0; i < V; ++i) {
                if (adj[currentVertex][i] && !visited[i]) {
                    visited[i] = true;
                    q.push(i);
                }
            }
        }

        delete[] visited;
    }

 
    ~Graph() {
        for (int i = 0; i < V; ++i)
            delete[] adj[i];
        delete[] adj;
    }
};

int main() {
    // Create a graph given in the example
    Graph g(5); //ENTER NO OF VERTICES IN BRACKET
    g.addEdge(0, 1); //LIST CONNECTION
    g.addEdge(0, 2);
    g.addEdge(1, 2);
    g.addEdge(2, 0);
    g.addEdge(2, 3);
    g.addEdge(3, 3);
g.addEdge(3, 4);
    std::cout << "Breadth First Traversal (starting from vertex 2): ";
    g.BFS(2); //ENTER STARTING NODE
    std::cout << std::endl;

    return 0;
}
